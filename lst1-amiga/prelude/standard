temp <- <primitive 110 10 >
<primitive 112 temp 1		" view " \
	#( #[ 32 250 1 156 242 245] \
	#(  ) ) >

<primitive 112 temp 2		" variables " \
	#( #[ 32 250 1 158 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" superClass " \
	#( #[ 32 250 1 151 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" respondsTo: " \
	#( #[ 32 114 34 162 247 18 34 33 250 2 155 247 2 91 243 \
 242 34 10 46 241 114 242 249 22 242 92 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" respondsTo " \
	#( #[ 32 250 1 154 242 245] \
	#(  ) ) >

<primitive 112 temp 6		" printString " \
	#( #[ 32 250 1 152 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" new: " \
	#( #[ 32 250 1 151 114 34 250 1 3 247 4 34 160 241 115 \
 242 32 35 250 2 153 115 32 48 250 2 155 247 5 35 \
 33 176 241 115 242 35 243 245] \
	#( #new:  ) ) >

<primitive 112 temp 8		" new " \
	#( #[ 32 250 1 151 113 33 250 1 3 247 4 33 160 241 114 \
 242 32 34 250 2 153 114 32 48 250 2 155 247 4 34 \
 160 241 114 242 34 243 245] \
	#( #new  ) ) >

<primitive 112 temp 9		" list " \
	#( #[ 32 250 1 157 242 245] \
	#(  ) ) >

<primitive 112 temp 10		" edit " \
	#( #[ 32 250 1 150 242 245] \
	#(  ) ) >

<primitive 98 #Class \
	<primitive 97 #Class #Object #Smalltalk:prelude/class.st \
	#(  ) \
	#( #view #variables #superClass #respondsTo: #respondsTo #printString #new: #new #list #edit  ) \
	temp 4 4 > >

temp <- <primitive 110 21 >
<primitive 112 temp 1		" shallowCopy " \
	#( #[ 32 250 1 4 113 33 80 199 247 4 32 243 248 26 242 \
 32 164 160 114 81 33 178 225 3 11 34 35 32 35 250 \
 2 111 250 3 112 243 179 242 34 243 242 245] \
	#(  ) ) >

<primitive 112 temp 2		" respondsTo: " \
	#( #[ 32 164 33 11 41 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" printString " \
	#( #[ 32 10 16 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" print " \
	#( #[ 32 169 250 1 121 242 245] \
	#(  ) ) >

<primitive 112 temp 5		" notNil " \
	#( #[ 91 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" next " \
	#( #[ 93 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" isNil " \
	#( #[ 92 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" isMemberOf: " \
	#( #[ 33 32 164 181 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" isKindOf: " \
	#( #[ 32 164 114 34 162 247 16 34 33 181 247 2 91 243 242 \
 34 10 46 241 114 242 249 20 242 92 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" first " \
	#( #[ 32 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" error: " \
	#( #[ 33 32 250 2 122 242 245] \
	#(  ) ) >

<primitive 112 temp 12		" do: " \
	#( #[ 32 166 114 34 162 247 11 33 34 180 242 32 167 241 114 \
 242 249 15 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" deepCopy " \
	#( #[ 32 250 1 4 113 33 80 199 247 4 32 243 248 28 242 \
 32 164 160 114 81 33 178 225 3 13 34 35 32 35 250 \
 2 111 10 20 250 3 112 243 179 242 34 243 242 245] \
	#(  ) ) >

<primitive 112 temp 14		" copy " \
	#( #[ 32 10 42 243 245] \
	#(  ) ) >

<primitive 112 temp 15		" class " \
	#( #[ 32 250 1 1 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" asSymbol " \
	#( #[ 32 10 16 10 17 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" asString " \
	#( #[ 32 164 169 243 245] \
	#(  ) ) >

<primitive 112 temp 18		" ~= " \
	#( #[ 32 33 201 172 243 245] \
	#(  ) ) >

<primitive 112 temp 19		" = " \
	#( #[ 32 33 181 243 245] \
	#(  ) ) >

<primitive 112 temp 20		" ~~ " \
	#( #[ 32 33 181 172 243 245] \
	#(  ) ) >

<primitive 112 temp 21		" == " \
	#( #[ 32 33 250 2 7 243 245] \
	#(  ) ) >

<primitive 98 #Object \
	<primitive 97 #Object #Object #Smalltalk:prelude/object.st \
	#(  ) \
	#( #shallowCopy #respondsTo: #printString #print #notNil #next #isNil #isMemberOf: #isKindOf: #first #error: #do: #deepCopy #copy #class #asSymbol #asString #~= #= #~~ #==  ) \
	temp 4 7 > >

temp <- <primitive 110 19 >
<primitive 112 temp 1		" sameAs: " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 102 248 4 242 \
 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" size " \
	#( #[ 32 250 1 100 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" print " \
	#( #[ 32 250 1 121 242 245] \
	#(  ) ) >

<primitive 112 temp 4		" printString " \
	#( #[ 32 250 1 109 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" printAt: " \
	#( #[ 32 33 10 49 33 10 50 250 3 126 242 245] \
	#(  ) ) >

<primitive 112 temp 6		" new: " \
	#( #[ 33 250 1 115 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" deepCopy " \
	#( #[ 32 250 1 107 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" copyFrom:length: " \
	#( #[ 32 33 34 250 3 106 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" copyFrom:to: " \
	#( #[ 32 33 34 33 193 81 192 250 3 106 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" compareError " \
	#( #[ 32 48 188 243 245] \
	#( 'strings can only be compared to strings'  ) ) >

<primitive 112 temp 11		" at:put: " \
	#( #[ 32 33 34 250 3 105 242 245] \
	#(  ) ) >

<primitive 112 temp 12		" at: " \
	#( #[ 32 33 250 2 104 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" asSymbol " \
	#( #[ 32 250 1 108 243 245] \
	#(  ) ) >

<primitive 112 temp 14		" > " \
	#( #[ 32 33 250 2 6 247 9 32 33 250 2 101 80 204 248 \
 4 242 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 15		" >= " \
	#( #[ 32 33 250 2 6 247 9 32 33 250 2 101 80 203 248 \
 4 242 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" <= " \
	#( #[ 32 33 250 2 6 247 9 32 33 250 2 101 80 200 248 \
 4 242 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" < " \
	#( #[ 32 33 250 2 6 247 9 32 33 250 2 101 80 199 248 \
 4 242 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 18		" = " \
	#( #[ 32 33 250 2 6 247 9 32 33 250 2 101 80 201 248 \
 4 242 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 19		" , " \
	#( #[ 32 32 33 250 2 6 247 3 33 248 3 242 33 169 250 \
 2 103 243 245] \
	#(  ) ) >

<primitive 98 #String \
	<primitive 97 #String #ArrayedCollection #Smalltalk:prelude/string.st \
	#(  ) \
	#( #sameAs: #size #print #printString #printAt: #new: #deepCopy #copyFrom:length: #copyFrom:to: #compareError #at:put: #at: #asSymbol #> #>= #<= #< #= #,  ) \
	temp 3 5 > >

temp <- <primitive 110 1 >
<primitive 112 temp 1		" nothing " \
	#( #[ 81 242 245] \
	#(  ) ) >

<primitive 98 #ArrayedCollection \
	<primitive 97 #ArrayedCollection #Object #Smalltalk:prelude/larray.st \
	#(  ) \
	#( #nothing  ) \
	temp 1 2 > >

temp <- <primitive 110 3 >
<primitive 112 temp 1		" printString " \
	#( #[ 48 243 245] \
	#( 'nil'  ) ) >

<primitive 112 temp 2		" notNil " \
	#( #[ 92 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" isNil " \
	#( #[ 91 243 245] \
	#(  ) ) >

<primitive 98 #UndefinedObject \
	<primitive 97 #UndefinedObject #Object #Smalltalk:prelude/nil.st \
	#(  ) \
	#( #printString #notNil #isNil  ) \
	temp 1 2 > >

temp <- <primitive 110 6 >
<primitive 112 temp 1		" size " \
	#( #[ 32 250 1 4 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" printString " \
	#( #[ 48 113 32 250 1 4 114 34 80 204 247 21 32 34 250 \
 2 111 169 49 11 17 33 11 17 113 34 81 193 241 114 \
 242 249 26 242 50 33 11 17 243 245] \
	#( ')' ' ' '#( '  ) ) >

<primitive 112 temp 3		" grow: " \
	#( #[ 32 33 250 2 113 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" at:put: " \
	#( #[ 33 81 199 251 6 33 32 250 1 4 204 247 6 32 48 \
 188 242 93 243 242 32 33 34 250 3 112 242 34 243 245 \
] \
	#( 'index error'  ) ) >

<primitive 112 temp 5		" at: " \
	#( #[ 33 81 199 251 6 33 32 250 1 4 204 247 6 32 48 \
 188 242 93 243 242 32 33 250 2 111 243 245] \
	#( 'index error'  ) ) >

<primitive 112 temp 6		" new: " \
	#( #[ 33 250 1 114 243 245] \
	#(  ) ) >

<primitive 98 #Array \
	<primitive 97 #Array #ArrayedCollection #Smalltalk:prelude/array.st \
	#(  ) \
	#( #size #printString #grow: #at:put: #at: #new:  ) \
	temp 3 4 > >

temp <- <primitive 110 6 >
<primitive 112 temp 1		" xor: " \
	#( #[ 32 33 182 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" eqv: " \
	#( #[ 32 33 181 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" or: " \
	#( #[ 32 251 2 33 165 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" and: " \
	#( #[ 32 252 2 33 165 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" | " \
	#( #[ 32 251 1 33 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" & " \
	#( #[ 32 252 1 33 243 245] \
	#(  ) ) >

<primitive 98 #Boolean \
	<primitive 97 #Boolean #Object #Smalltalk:prelude/boolean.st \
	#(  ) \
	#( #xor: #eqv: #or: #and: #| #&  ) \
	temp 2 3 > >

temp <- <primitive 110 5 >
<primitive 112 temp 1		" not " \
	#( #[ 92 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" ifFalse: " \
	#( #[ 93 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" ifTrue: " \
	#( #[ 33 165 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" ifFalse:ifTrue: " \
	#( #[ 34 165 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" ifTrue:ifFalse: " \
	#( #[ 33 165 243 245] \
	#(  ) ) >

<primitive 98 #True \
	<primitive 97 #True #Boolean #Smalltalk:prelude/true.st \
	#(  ) \
	#( #not #ifFalse: #ifTrue: #ifFalse:ifTrue: #ifTrue:ifFalse:  ) \
	temp 3 2 > >

temp <- <primitive 110 5 >
<primitive 112 temp 1		" not " \
	#( #[ 91 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" ifFalse: " \
	#( #[ 33 165 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" ifTrue: " \
	#( #[ 93 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" ifFalse:ifTrue: " \
	#( #[ 33 165 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" ifTrue:ifFalse: " \
	#( #[ 34 165 243 245] \
	#(  ) ) >

<primitive 98 #False \
	<primitive 97 #False #Boolean #Smalltalk:prelude/false.st \
	#(  ) \
	#( #not #ifFalse: #ifTrue: #ifFalse:ifTrue: #ifTrue:ifFalse:  ) \
	temp 3 2 > >

temp <- <primitive 110 14 >
<primitive 112 temp 1		" value:value:value:value:value: " \
	#( #[ 85 250 1 140 242 245] \
	#(  ) ) >

<primitive 112 temp 2		" value:value:value:value: " \
	#( #[ 84 250 1 140 242 245] \
	#(  ) ) >

<primitive 112 temp 3		" value:value:value: " \
	#( #[ 83 250 1 140 242 245] \
	#(  ) ) >

<primitive 112 temp 4		" value:value: " \
	#( #[ 82 250 1 140 242 245] \
	#(  ) ) >

<primitive 112 temp 5		" value: " \
	#( #[ 81 250 1 140 242 245] \
	#(  ) ) >

<primitive 112 temp 6		" value " \
	#( #[ 80 250 1 140 242 245] \
	#(  ) ) >

<primitive 112 temp 7		" whileFalse: " \
	#( #[ 32 165 246 5 33 165 242 249 9 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" whileFalse " \
	#( #[ 32 165 246 4 93 242 249 8 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" whileTrue: " \
	#( #[ 32 165 247 5 33 165 242 249 9 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" whileTrue " \
	#( #[ 32 165 247 4 93 242 249 8 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" forkWith: " \
	#( #[ 32 33 11 35 10 40 242 93 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" fork " \
	#( #[ 32 10 33 10 40 242 93 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" newProcessWith: " \
	#( #[ 32 33 250 2 141 243 245] \
	#(  ) ) >

<primitive 112 temp 14		" newProcess " \
	#( #[ 32 250 1 141 243 245] \
	#(  ) ) >

<primitive 98 #Block \
	<primitive 97 #Block #Object #Smalltalk:prelude/block.st \
	#(  ) \
	#( #value:value:value:value:value: #value:value:value:value: #value:value:value: #value:value: #value: #value #whileFalse: #whileFalse #whileTrue: #whileTrue #forkWith: #fork #newProcessWith: #newProcess  ) \
	temp 6 3 > >

temp <- <primitive 110 3 >
<primitive 112 temp 1		" asString " \
	#( #[ 32 250 1 93 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" printString " \
	#( #[ 32 250 1 92 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" == " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 91 248 2 242 \
 92 243 245] \
	#(  ) ) >

<primitive 98 #Symbol \
	<primitive 97 #Symbol #Object #Smalltalk:prelude/symbol.st \
	#(  ) \
	#( #asString #printString #==  ) \
	temp 2 4 > >

temp <- <primitive 110 9 >
<primitive 112 temp 1		" max: " \
	#( #[ 32 33 204 247 3 32 248 2 242 33 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" min: " \
	#( #[ 32 33 199 247 3 32 248 2 242 33 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" between:and: " \
	#( #[ 32 33 203 252 3 32 34 200 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" > " \
	#( #[ 33 32 199 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" >= " \
	#( #[ 32 33 204 251 3 32 33 201 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" ~= " \
	#( #[ 32 33 201 172 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" = " \
	#( #[ 32 33 204 251 3 32 33 199 172 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" < " \
	#( #[ 33 32 204 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" <= " \
	#( #[ 32 33 199 251 3 32 33 201 243 245] \
	#(  ) ) >

<primitive 98 #Magnitude \
	<primitive 97 #Magnitude #Object #Smalltalk:prelude/magnitude.st \
	#(  ) \
	#( #max: #min: #between:and: #> #>= #~= #= #< #<=  ) \
	temp 3 4 > >

temp <- <primitive 110 30 >
<primitive 112 temp 1		" truncateTo: " \
	#( #[ 32 33 190 10 47 33 194 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" to:by: " \
	#( #[ 5 46 160 241 32 33 34 131 0 242 243 245] \
	#( #from:to:by:  ) ) >

<primitive 112 temp 3		" to: " \
	#( #[ 5 46 160 241 32 33 81 131 0 242 243 245] \
	#( #from:to:by:  ) ) >

<primitive 112 temp 4		" strictlyPositive " \
	#( #[ 32 80 204 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" squared " \
	#( #[ 32 32 194 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" sqrt " \
	#( #[ 32 175 10 43 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" sign " \
	#( #[ 32 80 199 247 3 90 248 11 242 32 80 204 247 3 81 \
 248 2 242 80 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" roundTo: " \
	#( #[ 32 33 190 10 41 33 194 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" reciprocal " \
	#( #[ 48 32 190 243 245] \
	#( 1.00  ) ) >

<primitive 112 temp 10		" raisedTo: " \
	#( #[ 32 175 33 175 11 16 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" radians " \
	#( #[ 5 54 32 175 176 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" positive " \
	#( #[ 32 80 203 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" pi " \
	#( #[ 32 48 194 243 245] \
	#( 3.1415926  ) ) >

<primitive 112 temp 14		" negative " \
	#( #[ 32 80 199 243 245] \
	#(  ) ) >

<primitive 112 temp 15		" negated " \
	#( #[ 80 32 193 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" log: " \
	#( #[ 32 10 32 33 10 32 190 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" ln " \
	#( #[ 32 175 10 32 243 245] \
	#(  ) ) >

<primitive 112 temp 18		" gamma " \
	#( #[ 32 175 10 26 243 245] \
	#(  ) ) >

<primitive 112 temp 19		" exp " \
	#( #[ 32 175 10 23 243 245] \
	#(  ) ) >

<primitive 112 temp 20		" abs " \
	#( #[ 32 80 199 247 5 80 32 193 248 2 242 32 243 245] \
	#(  ) ) >

<primitive 112 temp 21		" @ " \
	#( #[ 5 53 160 32 11 50 33 11 51 243 245] \
	#(  ) ) >

<primitive 112 temp 22		" ^ " \
	#( #[ 32 175 33 175 11 16 243 245] \
	#(  ) ) >

<primitive 112 temp 23		" / " \
	#( #[ 32 33 11 34 33 32 11 34 190 243 245] \
	#(  ) ) >

<primitive 112 temp 24		" * " \
	#( #[ 32 33 11 34 33 32 11 34 194 243 245] \
	#(  ) ) >

<primitive 112 temp 25		" - " \
	#( #[ 32 33 11 34 33 32 11 34 193 243 245] \
	#(  ) ) >

<primitive 112 temp 26		" + " \
	#( #[ 32 33 11 34 33 32 11 34 192 243 245] \
	#(  ) ) >

<primitive 112 temp 27		" > " \
	#( #[ 32 33 11 34 33 32 11 34 204 243 245] \
	#(  ) ) >

<primitive 112 temp 28		" < " \
	#( #[ 32 33 11 34 33 32 11 34 199 243 245] \
	#(  ) ) >

<primitive 112 temp 29		" = " \
	#( #[ 32 33 11 34 33 32 11 34 201 243 245] \
	#(  ) ) >

<primitive 112 temp 30		" maxtype: " \
	#( #[ 32 33 250 2 9 247 3 32 248 4 242 33 32 191 243 \
 245] \
	#(  ) ) >

<primitive 98 #Number \
	<primitive 97 #Number #Magnitude #Smalltalk:prelude/number.st \
	#(  ) \
	#( #truncateTo: #to:by: #to: #strictlyPositive #squared #sqrt #sign #roundTo: #reciprocal #raisedTo: #radians #positive #pi #negative #negated #log: #ln #gamma #exp #abs #@ #^ #/ #* #- #+ #> #< #= #maxtype:  ) \
	temp 3 6 > >

temp <- <primitive 110 31 >
<primitive 112 temp 1		" timesRepeat: " \
	#( #[ 80 114 34 32 199 247 11 33 165 242 34 81 192 241 114 \
 242 249 16 242 245] \
	#(  ) ) >

<primitive 112 temp 2		" rem: " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 29 248 4 242 \
 32 10 35 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" radix: " \
	#( #[ 32 33 250 2 26 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" quo: " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 28 248 4 242 \
 32 10 35 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" odd " \
	#( #[ 32 82 205 80 202 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" noMask: " \
	#( #[ 80 32 33 197 201 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" lcm: " \
	#( #[ 32 33 250 2 6 247 10 32 33 194 32 33 11 27 206 \
 248 4 242 32 10 35 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" highBit " \
	#( #[ 32 250 1 34 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" gcd: " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 20 248 4 242 \
 32 10 35 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" factorial " \
	#( #[ 32 250 1 38 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" even " \
	#( #[ 32 82 205 80 201 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" bitXor: " \
	#( #[ 32 33 250 2 24 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" bitShift: " \
	#( #[ 32 33 250 2 25 243 245] \
	#(  ) ) >

<primitive 112 temp 14		" bitOr: " \
	#( #[ 32 33 250 2 22 243 245] \
	#(  ) ) >

<primitive 112 temp 15		" bitInvert " \
	#( #[ 32 250 1 33 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" bitAt: " \
	#( #[ 32 33 250 2 21 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" bitAnd: " \
	#( #[ 32 33 250 2 23 243 245] \
	#(  ) ) >

<primitive 112 temp 18		" asString " \
	#( #[ 32 250 1 37 243 245] \
	#(  ) ) >

<primitive 112 temp 19		" asFloat " \
	#( #[ 32 250 1 39 243 245] \
	#(  ) ) >

<primitive 112 temp 20		" asCharacter " \
	#( #[ 32 250 1 36 243 245] \
	#(  ) ) >

<primitive 112 temp 21		" anyMask: " \
	#( #[ 80 32 33 250 2 23 202 243 245] \
	#(  ) ) >

<primitive 112 temp 22		" allMask: " \
	#( #[ 33 32 33 250 2 23 201 243 245] \
	#(  ) ) >

<primitive 112 temp 23		" \\ " \
	#( #[ 32 33 250 2 6 247 18 32 32 80 199 247 3 90 248 \
 2 242 81 194 114 34 33 205 248 4 242 32 10 35 243 \
 245] \
	#(  ) ) >

<primitive 112 temp 24		" // " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 19 248 4 242 \
 32 10 35 243 245] \
	#(  ) ) >

<primitive 112 temp 25		" / " \
	#( #[ 32 175 33 190 243 245] \
	#(  ) ) >

<primitive 112 temp 26		" * " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 18 248 5 242 \
 32 33 145 0 243 245] \
	#( #*  ) ) >

<primitive 112 temp 27		" - " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 11 248 5 242 \
 32 33 145 0 243 245] \
	#( #-  ) ) >

<primitive 112 temp 28		" + " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 10 248 5 242 \
 32 33 145 0 243 245] \
	#( #+  ) ) >

<primitive 112 temp 29		" < " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 12 248 5 242 \
 32 33 145 0 243 245] \
	#( #<  ) ) >

<primitive 112 temp 30		" > " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 13 248 5 242 \
 32 33 145 0 243 245] \
	#( #>  ) ) >

<primitive 112 temp 31		" = " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 16 248 5 242 \
 32 33 145 0 243 245] \
	#( #=  ) ) >

<primitive 98 #Integer \
	<primitive 97 #Integer #Number #Smalltalk:prelude/integer.st \
	#(  ) \
	#( #timesRepeat: #rem: #radix: #quo: #odd #noMask: #lcm: #highBit #gcd: #factorial #even #bitXor: #bitShift: #bitOr: #bitInvert #bitAt: #bitAnd: #asString #asFloat #asCharacter #anyMask: #allMask: #\\ #// #/ #* #- #+ #< #> #=  ) \
	temp 3 5 > >

temp <- <primitive 110 18 >
<primitive 112 temp 1		" printString " \
	#( #[ 48 32 250 1 58 11 17 243 245] \
	#( '$'  ) ) >

<primitive 112 temp 2		" isVowel " \
	#( #[ 32 250 1 51 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" isUppercase " \
	#( #[ 32 48 49 218 243 245] \
	#( $A $Z  ) ) >

<primitive 112 temp 4		" isSeparator " \
	#( #[ 32 250 1 55 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" isLowercase " \
	#( #[ 32 48 49 218 243 245] \
	#( $a $z  ) ) >

<primitive 112 temp 6		" isLetter " \
	#( #[ 32 10 28 251 3 32 10 29 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" isDigit " \
	#( #[ 32 48 49 218 243 245] \
	#( $0 $9  ) ) >

<primitive 112 temp 8		" isAlphaNumeric " \
	#( #[ 32 250 1 56 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" digitValue " \
	#( #[ 32 250 1 50 241 113 161 247 3 32 48 188 242 33 243 \
 245] \
	#( 'digitValue on nondigit char'  ) ) >

<primitive 112 temp 10		" compareError " \
	#( #[ 32 48 188 243 245] \
	#( 'char cannot be compared to non char'  ) ) >

<primitive 112 temp 11		" asString " \
	#( #[ 32 250 1 58 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" asUppercase " \
	#( #[ 32 250 1 53 247 6 32 250 1 57 248 2 242 32 243 \
 245] \
	#(  ) ) >

<primitive 112 temp 13		" asLowercase " \
	#( #[ 32 250 1 54 247 6 32 250 1 57 248 2 242 32 243 \
 245] \
	#(  ) ) >

<primitive 112 temp 14		" asciiValue " \
	#( #[ 32 250 1 59 243 245] \
	#(  ) ) >

<primitive 112 temp 15		" > " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 43 248 4 242 \
 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" = " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 46 248 4 242 \
 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" < " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 42 248 4 242 \
 32 10 19 243 245] \
	#(  ) ) >

<primitive 112 temp 18		" == " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 46 248 2 242 \
 92 243 245] \
	#(  ) ) >

<primitive 98 #Char \
	<primitive 97 #Char #Magnitude #Smalltalk:prelude/char.st \
	#(  ) \
	#( #printString #isVowel #isUppercase #isSeparator #isLowercase #isLetter #isDigit #isAlphaNumeric #digitValue #compareError #asString #asUppercase #asLowercase #asciiValue #> #= #< #==  ) \
	temp 2 4 > >

temp <- <primitive 110 25 >
<primitive 112 temp 1		" truncated " \
	#( #[ 32 48 199 247 6 32 250 1 73 248 5 242 32 250 1 \
 72 243 245] \
	#( 0.0  ) ) >

<primitive 112 temp 2		" sqrt " \
	#( #[ 32 250 1 71 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" rounded " \
	#( #[ 32 48 192 250 1 72 243 245] \
	#( 0.5  ) ) >

<primitive 112 temp 4		" radix: " \
	#( #[ 32 33 250 2 89 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" ln " \
	#( #[ 32 250 1 70 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" integerPart " \
	#( #[ 32 250 1 75 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" gamma " \
	#( #[ 32 250 1 77 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" fractionPart " \
	#( #[ 32 250 1 76 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" floor " \
	#( #[ 32 250 1 72 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" exp " \
	#( #[ 32 250 1 79 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" coerce: " \
	#( #[ 33 175 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" ceiling " \
	#( #[ 32 250 1 73 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" asString " \
	#( #[ 32 250 1 78 243 245] \
	#(  ) ) >

<primitive 112 temp 14		" asFloat " \
	#( #[ 32 243 245] \
	#(  ) ) >

<primitive 112 temp 15		" arcTan " \
	#( #[ 5 54 32 250 1 86 176 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" arcSin " \
	#( #[ 5 54 32 250 1 84 176 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" arcCos " \
	#( #[ 5 54 32 250 1 85 176 243 245] \
	#(  ) ) >

<primitive 112 temp 18		" ^ " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 88 248 5 242 \
 32 33 145 0 243 245] \
	#( #raisedTo:  ) ) >

<primitive 112 temp 19		" / " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 69 248 5 242 \
 32 33 145 0 243 245] \
	#( #/  ) ) >

<primitive 112 temp 20		" * " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 68 248 5 242 \
 32 33 145 0 243 245] \
	#( #*  ) ) >

<primitive 112 temp 21		" - " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 61 248 5 242 \
 32 33 145 0 243 245] \
	#( #-  ) ) >

<primitive 112 temp 22		" + " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 60 248 5 242 \
 32 33 145 0 243 245] \
	#( #+  ) ) >

<primitive 112 temp 23		" > " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 63 248 5 242 \
 32 33 145 0 243 245] \
	#( #>  ) ) >

<primitive 112 temp 24		" < " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 62 248 5 242 \
 32 33 145 0 243 245] \
	#( #<  ) ) >

<primitive 112 temp 25		" = " \
	#( #[ 32 33 250 2 6 247 7 32 33 250 2 66 248 5 242 \
 32 33 145 0 243 245] \
	#( #=  ) ) >

<primitive 98 #Float \
	<primitive 97 #Float #Number #Smalltalk:prelude/float.st \
	#(  ) \
	#( #truncated #sqrt #rounded #radix: #ln #integerPart #gamma #fractionPart #floor #exp #coerce: #ceiling #asString #asFloat #arcTan #arcSin #arcCos #^ #/ #* #- #+ #> #< #=  ) \
	temp 2 4 > >

temp <- <primitive 110 8 >
<primitive 112 temp 1		" printString " \
	#( #[ 16 10 16 48 11 17 243 245] \
	#( ' radians'  ) ) >

<primitive 112 temp 2		" asFloat " \
	#( #[ 16 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" tan " \
	#( #[ 16 250 1 81 16 250 1 82 190 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" cos " \
	#( #[ 16 250 1 82 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" sin " \
	#( #[ 16 250 1 81 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" = " \
	#( #[ 16 33 175 201 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" < " \
	#( #[ 16 33 175 199 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" new: " \
	#( #[ 33 175 250 1 80 96 245] \
	#(  ) ) >

<primitive 98 #Radian \
	<primitive 97 #Radian #Magnitude #Smalltalk:prelude/radian.st \
	#(  #value ) \
	#( #printString #asFloat #tan #cos #sin #= #< #new:  ) \
	temp 2 3 > >

temp <- <primitive 110 21 >
<primitive 112 temp 1		" y: " \
	#( #[ 33 97 245] \
	#(  ) ) >

<primitive 112 temp 2		" y " \
	#( #[ 17 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" x:y: " \
	#( #[ 33 96 34 97 245] \
	#(  ) ) >

<primitive 112 temp 4		" x: " \
	#( #[ 33 96 245] \
	#(  ) ) >

<primitive 112 temp 5		" x " \
	#( #[ 16 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" transpose " \
	#( #[ 5 53 160 17 11 50 16 11 51 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" printString " \
	#( #[ 16 169 48 11 17 17 169 11 17 243 245] \
	#( ' @ '  ) ) >

<primitive 112 temp 8		" min: " \
	#( #[ 5 53 160 16 33 10 49 207 11 50 17 33 10 50 207 \
 11 51 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" max: " \
	#( #[ 5 53 160 16 33 10 49 12 16 11 50 17 33 10 50 \
 12 16 11 51 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" dist: " \
	#( #[ 16 33 10 49 193 10 44 17 33 10 50 193 10 44 192 \
 10 43 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" asString " \
	#( #[ 16 10 16 48 11 17 17 10 16 11 17 243 245] \
	#( ' @ '  ) ) >

<primitive 112 temp 12		" abs " \
	#( #[ 5 53 160 16 173 11 50 17 173 11 51 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" // " \
	#( #[ 5 53 160 16 33 11 18 11 50 17 33 11 18 11 51 \
 243 245] \
	#(  ) ) >

<primitive 112 temp 14		" / " \
	#( #[ 5 53 160 16 33 190 11 50 17 33 190 11 51 243 245 \
] \
	#(  ) ) >

<primitive 112 temp 15		" - " \
	#( #[ 5 53 160 16 33 10 49 193 11 50 17 33 10 50 193 \
 11 51 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" + " \
	#( #[ 5 53 160 16 33 10 49 192 11 50 17 33 10 50 192 \
 11 51 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" * " \
	#( #[ 5 53 160 16 33 194 11 50 17 33 194 11 51 243 245 \
] \
	#(  ) ) >

<primitive 112 temp 18		" = " \
	#( #[ 16 33 10 49 201 252 5 17 33 10 50 201 243 245] \
	#(  ) ) >

<primitive 112 temp 19		" >= " \
	#( #[ 16 33 10 49 203 252 5 17 33 10 50 203 243 245] \
	#(  ) ) >

<primitive 112 temp 20		" <= " \
	#( #[ 16 33 10 49 200 252 5 17 33 10 50 199 243 245] \
	#(  ) ) >

<primitive 112 temp 21		" < " \
	#( #[ 16 33 10 49 199 252 5 17 33 10 50 199 243 245] \
	#(  ) ) >

<primitive 98 #Point \
	<primitive 97 #Point #Magnitude #Smalltalk:prelude/point.st \
	#(  #xvalue #yvalue ) \
	#( #y: #y #x:y: #x: #x #transpose #printString #min: #max: #dist: #asString #abs #// #/ #- #+ #* #= #>= #<= #<  ) \
	temp 3 4 > >

temp <- <primitive 110 7 >
<primitive 112 temp 1		" next: " \
	#( #[ 5 30 33 176 114 81 33 178 225 3 6 34 35 32 167 \
 208 243 179 242 34 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" randInteger: " \
	#( #[ 32 167 33 194 10 47 81 192 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" between:and: " \
	#( #[ 32 167 34 33 193 194 33 192 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" next " \
	#( #[ 16 250 1 35 241 96 250 1 32 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" first " \
	#( #[ 16 250 1 35 241 96 250 1 32 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" randomize " \
	#( #[ 250 0 161 96 245] \
	#(  ) ) >

<primitive 112 temp 7		" new " \
	#( #[ 81 96 245] \
	#(  ) ) >

<primitive 98 #Random \
	<primitive 97 #Random #Object #Smalltalk:prelude/random.st \
	#(  #seed ) \
	#( #next: #randInteger: #between:and: #next #first #randomize #new  ) \
	temp 4 6 > >

temp <- <primitive 110 23 >
<primitive 112 temp 1		" size " \
	#( #[ 80 113 32 225 2 6 33 81 192 241 113 243 179 242 33 \
 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" shallowCopy " \
	#( #[ 5 48 160 113 32 225 2 5 33 34 11 22 243 179 242 \
 32 33 191 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" select: " \
	#( #[ 32 32 164 160 226 2 11 33 35 180 247 3 34 35 189 \
 242 34 243 215 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" remove:ifAbsent: " \
	#( #[ 32 33 11 30 247 6 32 33 11 39 248 3 242 34 165 \
 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" remove: " \
	#( #[ 32 33 224 4 32 48 188 244 216 242 33 243 245] \
	#( 'attempt to remove object not found in collection'  ) ) >

<primitive 112 temp 6		" reject: " \
	#( #[ 32 225 2 5 33 34 180 172 243 11 44 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" printString " \
	#( #[ 32 32 164 169 48 11 17 226 1 9 33 49 11 17 34 \
 169 11 17 243 215 50 11 17 243 245] \
	#( ' (' ' ' ' )'  ) ) >

<primitive 112 temp 8		" occurrencesOf: " \
	#( #[ 32 80 226 2 13 35 33 201 247 5 34 81 192 248 2 \
 242 34 243 215 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" isEmpty " \
	#( #[ 32 163 80 201 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" inject:into: " \
	#( #[ 33 115 32 225 4 7 34 35 36 211 241 115 243 179 242 \
 35 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" includes: " \
	#( #[ 32 225 2 8 34 33 201 247 2 91 244 243 179 242 92 \
 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" first " \
	#( #[ 32 48 188 243 245] \
	#( 'subclass should implement first'  ) ) >

<primitive 112 temp 13		" detect:ifAbsent: " \
	#( #[ 32 225 3 8 33 35 180 247 2 35 244 243 179 242 34 \
 165 243 245] \
	#(  ) ) >

<primitive 112 temp 14		" detect: " \
	#( #[ 32 33 224 4 32 48 188 243 223 243 245] \
	#( 'no object found matching detect'  ) ) >

<primitive 112 temp 15		" deepCopy " \
	#( #[ 5 48 160 113 32 225 2 7 33 34 10 20 11 22 243 \
 179 242 32 33 191 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" collect: " \
	#( #[ 32 32 164 160 226 2 8 34 33 35 180 189 242 34 243 \
 215 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" coerce: " \
	#( #[ 32 160 114 33 225 3 4 34 35 189 243 179 242 34 243 \
 245] \
	#(  ) ) >

<primitive 112 temp 18		" asString " \
	#( #[ 5 58 32 163 176 241 81 32 163 32 131 0 242 243 245 \
] \
	#( #replaceFrom:to:with:  ) ) >

<primitive 112 temp 19		" asList " \
	#( #[ 5 48 160 32 11 20 243 245] \
	#(  ) ) >

<primitive 112 temp 20		" asSet " \
	#( #[ 5 57 160 32 11 19 243 245] \
	#(  ) ) >

<primitive 112 temp 21		" asBag " \
	#( #[ 5 32 160 32 11 19 243 245] \
	#(  ) ) >

<primitive 112 temp 22		" asArray " \
	#( #[ 5 30 32 163 176 241 81 32 163 32 131 0 242 243 245 \
] \
	#( #replaceFrom:to:with:  ) ) >

<primitive 112 temp 23		" addAll: " \
	#( #[ 33 225 2 4 32 34 189 243 179 242 245] \
	#(  ) ) >

<primitive 98 #Collection \
	<primitive 97 #Collection #Object #Smalltalk:prelude/collection.st \
	#(  ) \
	#( #size #shallowCopy #select: #remove:ifAbsent: #remove: #reject: #printString #occurrencesOf: #isEmpty #inject:into: #includes: #first #detect:ifAbsent: #detect: #deepCopy #collect: #coerce: #asString #asList #asSet #asBag #asArray #addAll:  ) \
	temp 5 7 > >

temp <- <primitive 110 8 >
<primitive 112 temp 1		" next " \
	#( #[ 17 162 247 27 17 80 204 247 9 17 81 193 97 16 171 \
 243 248 10 242 16 167 241 97 161 247 2 93 243 242 249 \
 31 242 93 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" first " \
	#( #[ 16 166 241 97 161 247 2 93 243 242 17 81 193 97 16 \
 171 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" occurrencesOf: " \
	#( #[ 16 33 224 2 80 243 213 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" size " \
	#( #[ 16 80 226 1 4 33 34 192 243 215 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" remove:ifAbsent: " \
	#( #[ 16 33 224 3 34 165 244 213 115 81 35 201 247 6 16 \
 33 11 40 248 7 242 16 33 35 81 193 208 242 245] \
	#(  ) ) >

<primitive 112 temp 6		" add:withOccurrences: " \
	#( #[ 34 224 4 32 33 189 243 183 242 33 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" add: " \
	#( #[ 16 33 81 16 33 224 2 80 243 213 192 208 242 245] \
	#(  ) ) >

<primitive 112 temp 8		" new " \
	#( #[ 5 40 160 96 245] \
	#(  ) ) >

<primitive 98 #Bag \
	<primitive 97 #Bag #Collection #Smalltalk:prelude/bag.st \
	#(  #dict #count ) \
	#( #next #first #occurrencesOf: #size #remove:ifAbsent: #add:withOccurrences: #add: #new  ) \
	temp 4 8 > >

temp <- <primitive 110 7 >
<primitive 112 temp 1		" next " \
	#( #[ 16 167 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" first " \
	#( #[ 16 166 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" occurrencesOf: " \
	#( #[ 16 33 11 30 247 3 81 248 2 242 80 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" size " \
	#( #[ 16 163 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" remove:ifAbsent: " \
	#( #[ 16 33 34 216 242 245] \
	#(  ) ) >

<primitive 112 temp 6		" add: " \
	#( #[ 16 33 11 30 246 3 16 33 189 242 245] \
	#(  ) ) >

<primitive 112 temp 7		" new " \
	#( #[ 5 48 160 96 245] \
	#(  ) ) >

<primitive 98 #Set \
	<primitive 97 #Set #Collection #Smalltalk:prelude/set.st \
	#(  #list ) \
	#( #next #first #occurrencesOf: #size #remove:ifAbsent: #add: #new  ) \
	temp 3 4 > >

temp <- <primitive 110 18 >
<primitive 112 temp 1		" values " \
	#( #[ 5 32 160 113 32 225 2 4 33 34 189 243 179 242 33 \
 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" select: " \
	#( #[ 32 32 5 40 160 226 2 13 33 35 180 247 5 34 32 \
 171 35 208 242 34 243 215 191 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" removeKey:ifAbsent: " \
	#( #[ 32 48 188 243 245] \
	#( 'subclass should implement RemoveKey:ifAbsent:'  ) ) >

<primitive 112 temp 4		" removeKey: " \
	#( #[ 32 33 224 6 32 48 188 242 33 244 217 243 245] \
	#( 'no element associated with key'  ) ) >

<primitive 112 temp 5		" remove: " \
	#( #[ 32 48 188 243 245] \
	#( 'object must be removed with explicit key'  ) ) >

<primitive 112 temp 6		" keysSelect: " \
	#( #[ 32 32 5 40 160 226 2 14 33 35 171 180 247 5 34 \
 32 171 35 208 242 34 243 215 191 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" keysDo: " \
	#( #[ 32 225 2 5 33 32 171 180 243 179 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" keys " \
	#( #[ 5 57 160 113 32 225 2 4 33 34 189 243 11 32 242 \
 33 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" indexOf:ifAbsent: " \
	#( #[ 32 225 3 9 35 33 201 247 3 32 171 244 243 179 242 \
 34 165 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" indexOf: " \
	#( #[ 32 33 224 4 32 48 188 243 214 243 245] \
	#( 'indexOf element not found'  ) ) >

<primitive 112 temp 11		" includesKey: " \
	#( #[ 32 33 224 2 92 244 213 242 91 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" collect: " \
	#( #[ 32 32 5 40 160 226 2 10 34 32 171 33 35 180 208 \
 242 34 243 215 191 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" binaryDo: " \
	#( #[ 32 225 3 6 33 32 171 35 211 243 179 242 93 243 245 \
] \
	#(  ) ) >

<primitive 112 temp 14		" atAll:put: " \
	#( #[ 33 225 3 5 32 35 34 208 243 179 242 245] \
	#(  ) ) >

<primitive 112 temp 15		" at: " \
	#( #[ 32 33 224 10 32 33 169 48 11 17 188 242 33 244 213 \
 243 245] \
	#( ': association not found'  ) ) >

<primitive 112 temp 16		" asDictionary " \
	#( #[ 5 40 160 113 32 226 2 5 33 34 35 208 243 11 23 \
 242 33 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" addAll: " \
	#( #[ 33 226 2 5 32 34 35 208 243 11 23 242 33 243 245 \
] \
	#(  ) ) >

<primitive 112 temp 18		" add: " \
	#( #[ 32 48 188 243 245] \
	#( 'Must add with explicit key'  ) ) >

<primitive 98 #KeyedCollection \
	<primitive 97 #KeyedCollection #Collection #Smalltalk:prelude/kcollection.st \
	#(  ) \
	#( #values #select: #removeKey:ifAbsent: #removeKey: #remove: #keysSelect: #keysDo: #keys #indexOf:ifAbsent: #indexOf: #includesKey: #collect: #binaryDo: #atAll:put: #at: #asDictionary #addAll: #add:  ) \
	temp 4 9 > >

temp <- <primitive 110 12 >
<primitive 112 temp 1		" checkBucket: " \
	#( #[ 16 33 241 97 177 241 98 161 247 2 93 243 242 18 166 \
 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" currentKey " \
	#( #[ 18 162 247 11 18 10 21 113 33 162 247 3 33 10 49 \
 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" printString " \
	#( #[ 32 32 164 169 48 11 17 226 1 17 33 32 171 169 11 \
 17 49 11 17 34 169 11 17 50 11 17 243 215 51 11 \
 17 243 245] \
	#( ' ( ' ' @ ' ' ' ')'  ) ) >

<primitive 112 temp 4		" next " \
	#( #[ 18 167 241 113 162 247 4 33 10 50 243 242 17 5 17 \
 199 247 20 17 81 192 97 32 17 11 24 241 113 162 247 \
 4 33 10 50 243 242 249 26 242 93 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" first " \
	#( #[ 81 5 17 178 225 2 14 32 34 11 24 241 113 162 247 \
 4 33 10 50 244 243 179 242 93 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" findAssociation:inList: " \
	#( #[ 34 225 3 10 35 10 49 33 201 247 2 35 244 243 179 \
 242 93 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" removeKey:ifAbsent: " \
	#( #[ 32 33 11 28 115 32 33 35 222 116 36 161 247 3 34 \
 165 243 242 35 36 224 3 34 165 244 216 10 50 243 245 \
] \
	#(  ) ) >

<primitive 112 temp 8		" at:ifAbsent: " \
	#( #[ 32 33 11 28 115 32 33 35 222 116 36 161 247 3 34 \
 165 243 242 36 10 50 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" at:put: " \
	#( #[ 32 33 11 28 115 32 33 35 222 116 36 161 247 15 5 \
 53 160 33 11 50 34 11 51 116 35 36 189 248 5 242 \
 36 34 11 51 242 34 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" getList: " \
	#( #[ 32 33 11 29 115 16 35 177 114 34 161 247 8 5 48 \
 160 114 16 35 34 208 242 34 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" hashNumber: " \
	#( #[ 33 250 1 5 16 163 195 81 192 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" new " \
	#( #[ 5 30 5 17 176 96 245] \
	#(  ) ) >

<primitive 98 #Dictionary \
	<primitive 97 #Dictionary #KeyedCollection #Smalltalk:prelude/dictionary.st \
	#(  #hashTable #currentBucket #currentList ) \
	#( #checkBucket: #currentKey #printString #next #first #findAssociation:inList: #removeKey:ifAbsent: #at:ifAbsent: #at:put: #getList: #hashNumber: #new  ) \
	temp 5 6 > >

temp <- <primitive 110 21 >
<primitive 112 temp 1		" with:do: " \
	#( #[ 32 166 115 33 166 116 35 162 247 15 34 35 36 211 242 \
 32 167 115 33 167 241 116 242 249 19 242 93 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" sort: " \
	#( #[ 32 174 116 82 36 163 178 225 5 51 37 81 193 114 34 \
 81 203 252 11 33 36 34 177 36 34 81 192 177 211 172 \
 247 28 36 34 177 115 36 34 36 34 81 192 177 208 242 \
 36 34 81 192 35 208 242 34 81 193 241 114 242 249 46 \
 243 179 242 32 36 191 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" sort " \
	#( #[ 32 226 1 4 33 34 200 243 11 46 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" select: " \
	#( #[ 32 32 5 48 160 226 2 12 33 35 180 247 4 34 35 \
 11 22 242 34 243 215 191 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" reversed " \
	#( #[ 5 30 32 163 241 114 176 113 32 225 3 11 33 34 35 \
 208 242 34 81 193 241 114 243 179 242 32 33 191 243 245 \
] \
	#(  ) ) >

<primitive 112 temp 6		" reverseDo: " \
	#( #[ 32 10 31 114 32 10 25 115 34 35 203 247 20 32 34 \
 11 52 247 5 33 32 34 177 180 242 34 81 193 241 114 \
 242 249 25 242 93 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" replaceFrom:to:with:startingAt: " \
	#( #[ 80 117 33 37 192 34 200 247 19 32 33 37 192 35 37 \
 36 192 177 208 242 37 81 192 241 117 242 249 26 242 245 \
] \
	#(  ) ) >

<primitive 112 temp 8		" replaceFrom:to:with: " \
	#( #[ 35 33 226 4 9 32 36 37 208 242 36 81 192 243 215 \
 242 245] \
	#(  ) ) >

<primitive 112 temp 9		" last " \
	#( #[ 80 32 163 201 246 5 32 32 10 31 177 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" indexOfSubCollection:startingAt: " \
	#( #[ 32 33 34 224 6 32 48 188 242 93 243 131 1 243 245 \
] \
	#( 'element not found' #indexOfSubCollection:startingAt:ifAbsent:  ) ) >

<primitive 112 temp 11		" indexOfSubCollection:startingAt:ifAbsent: " \
	#( #[ 34 116 32 163 33 163 193 117 36 37 200 247 17 33 32 \
 36 221 247 2 36 243 242 36 81 192 241 116 242 249 22 \
 242 35 165 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" findLast:ifAbsent: " \
	#( #[ 32 225 3 9 33 35 180 247 3 32 171 244 243 11 42 \
 242 34 165 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" findLast: " \
	#( #[ 32 33 224 4 32 48 188 243 220 242 245] \
	#( 'last element not found'  ) ) >

<primitive 112 temp 14		" findFirst:ifAbsent: " \
	#( #[ 32 225 3 9 33 35 180 247 3 32 171 244 243 179 242 \
 34 165 243 245] \
	#(  ) ) >

<primitive 112 temp 15		" findFirst: " \
	#( #[ 32 33 224 4 32 48 188 243 219 243 245] \
	#( 'first element not found'  ) ) >

<primitive 112 temp 16		" equals:startingAt: " \
	#( #[ 80 115 32 225 4 22 36 33 34 35 192 224 2 92 244 \
 213 201 246 2 92 244 242 35 81 192 241 115 243 179 242 \
 91 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" copyWithout: " \
	#( #[ 5 48 160 114 32 225 3 10 35 33 181 246 4 34 35 \
 11 22 243 179 242 32 34 191 243 245] \
	#(  ) ) >

<primitive 112 temp 18		" copyWith: " \
	#( #[ 32 5 48 160 241 32 11 20 242 241 33 11 22 242 191 \
 243 245] \
	#(  ) ) >

<primitive 112 temp 19		" copyFrom:to: " \
	#( #[ 5 48 160 115 33 34 178 225 4 7 35 32 36 177 11 \
 22 243 179 242 32 35 191 243 245] \
	#(  ) ) >

<primitive 112 temp 20		" collect: " \
	#( #[ 32 32 5 48 160 226 2 9 34 33 35 180 11 22 242 \
 34 243 215 191 243 245] \
	#(  ) ) >

<primitive 112 temp 21		" , " \
	#( #[ 32 5 48 160 241 32 11 20 242 241 33 11 20 242 191 \
 243 245] \
	#(  ) ) >

<primitive 98 #SequenceableCollection \
	<primitive 97 #SequenceableCollection #KeyedCollection #Smalltalk:prelude/scollection.st \
	#(  ) \
	#( #with:do: #sort: #sort #select: #reversed #reverseDo: #replaceFrom:to:with:startingAt: #replaceFrom:to:with: #last #indexOfSubCollection:startingAt: #indexOfSubCollection:startingAt:ifAbsent: #findLast:ifAbsent: #findLast: #findFirst:ifAbsent: #findFirst: #equals:startingAt: #copyWithout: #copyWith: #copyFrom:to: #collect: #,  ) \
	temp 6 9 > >

temp <- <primitive 110 13 >
<primitive 112 temp 1		" shallowCopy " \
	#( #[ 16 17 18 212 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" deepCopy " \
	#( #[ 16 17 18 212 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" removeKey:ifAbsent: " \
	#( #[ 32 48 188 242 34 165 243 245] \
	#( 'cannot remove from Interval'  ) ) >

<primitive 112 temp 4		" add: " \
	#( #[ 32 48 188 243 245] \
	#( 'cannot store into Interval'  ) ) >

<primitive 112 temp 5		" at:put: " \
	#( #[ 32 48 188 243 245] \
	#( 'cannot store into Interval'  ) ) >

<primitive 112 temp 6		" coerce: " \
	#( #[ 33 174 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" printString " \
	#( #[ 48 16 169 11 17 49 11 17 17 169 11 17 50 11 17 \
 18 169 11 17 243 245] \
	#( 'Interval ' ' to ' ' by '  ) ) >

<primitive 112 temp 8		" at:ifAbsent: " \
	#( #[ 16 18 33 81 193 194 192 115 32 35 11 31 247 3 35 \
 248 3 242 34 165 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" next " \
	#( #[ 19 18 192 99 32 19 11 31 247 1 19 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" first " \
	#( #[ 16 99 32 19 11 31 247 1 19 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" inRange: " \
	#( #[ 18 170 247 10 33 16 203 252 3 33 17 200 248 9 242 \
 33 17 203 252 3 33 16 200 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" size " \
	#( #[ 18 170 247 5 17 16 199 248 4 242 16 17 199 247 3 \
 80 248 9 242 17 16 193 18 11 18 81 192 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" from:to:by: " \
	#( #[ 33 241 96 99 34 97 35 98 245] \
	#(  ) ) >

<primitive 98 #Interval \
	<primitive 97 #Interval #SequenceableCollection #Smalltalk:prelude/interval.st \
	#(  #lower #upper #step #current ) \
	#( #shallowCopy #deepCopy #removeKey:ifAbsent: #add: #at:put: #coerce: #printString #at:ifAbsent: #next #first #inRange: #size #from:to:by:  ) \
	temp 4 5 > >

temp <- <primitive 110 17 >
<primitive 112 temp 1		" isEmpty " \
	#( #[ 16 93 181 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" last " \
	#( #[ 16 161 247 2 93 243 242 32 10 24 10 49 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" current " \
	#( #[ 17 10 49 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" next " \
	#( #[ 17 10 50 241 97 162 247 3 17 10 49 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" first " \
	#( #[ 16 241 97 162 247 3 17 10 49 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" removeLast " \
	#( #[ 16 161 247 4 32 10 37 243 242 32 32 10 30 224 4 \
 32 10 37 243 216 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" removeFirst " \
	#( #[ 16 161 247 4 32 10 37 243 242 16 113 16 10 50 96 \
 33 10 49 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" removeError " \
	#( #[ 32 48 188 243 245] \
	#( 'cannot remove from an empty list'  ) ) >

<primitive 112 temp 9		" remove:ifAbsent: " \
	#( #[ 16 161 247 3 34 165 243 242 32 93 226 3 31 17 10 \
 49 33 181 247 21 35 161 247 7 17 10 50 241 96 248 \
 7 242 35 17 10 50 11 51 242 33 244 242 17 243 215 \
 242 34 165 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" remove: " \
	#( #[ 32 33 224 4 32 48 188 243 216 243 245] \
	#( 'cant find item'  ) ) >

<primitive 112 temp 11		" findLast " \
	#( #[ 16 241 113 161 247 2 93 243 242 33 10 50 162 247 8 \
 33 10 50 241 113 242 249 14 242 33 243 245] \
	#(  ) ) >

<primitive 112 temp 12		" coerce: " \
	#( #[ 5 48 160 114 33 225 3 5 34 35 11 22 243 179 242 \
 34 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" addAllLast: " \
	#( #[ 33 225 2 5 32 34 11 22 243 179 242 245] \
	#(  ) ) >

<primitive 112 temp 14		" addAllFirst: " \
	#( #[ 33 225 2 5 32 34 11 21 243 179 242 245] \
	#(  ) ) >

<primitive 112 temp 15		" addLast: " \
	#( #[ 16 161 247 5 32 33 11 21 243 242 32 10 24 5 53 \
 160 33 11 50 93 11 51 11 51 242 33 243 245] \
	#(  ) ) >

<primitive 112 temp 16		" addFirst: " \
	#( #[ 5 53 160 33 11 50 16 11 51 96 33 243 245] \
	#(  ) ) >

<primitive 112 temp 17		" add: " \
	#( #[ 5 53 160 33 11 50 16 11 51 96 33 243 245] \
	#(  ) ) >

<primitive 98 #List \
	<primitive 97 #List #SequenceableCollection #Smalltalk:prelude/list.st \
	#(  #first #current ) \
	#( #isEmpty #last #current #next #first #removeLast #removeFirst #removeError #remove:ifAbsent: #remove: #findLast #coerce: #addAllLast: #addAllFirst: #addLast: #addFirst: #add:  ) \
	temp 5 8 > >

temp <- <primitive 110 13 >
<primitive 112 temp 1		" shallowCopy " \
	#( #[ 32 164 32 163 176 113 81 32 163 178 225 2 7 33 34 \
 32 34 177 208 243 179 242 33 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" padTo: " \
	#( #[ 32 163 33 199 247 12 32 32 164 33 32 163 193 176 11 \
 17 248 2 242 32 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" next " \
	#( #[ 16 81 192 96 16 32 163 200 247 3 32 16 177 243 245 \
] \
	#(  ) ) >

<primitive 112 temp 4		" lastKey " \
	#( #[ 32 163 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" firstKey " \
	#( #[ 81 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" first " \
	#( #[ 81 96 16 32 163 200 247 3 32 16 177 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" do: " \
	#( #[ 81 32 163 178 225 2 8 34 96 33 32 34 177 180 243 \
 179 242 245] \
	#(  ) ) >

<primitive 112 temp 8		" deepCopy " \
	#( #[ 32 164 32 163 176 113 81 32 163 178 225 2 9 33 34 \
 32 34 177 10 20 208 243 179 242 33 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" currentKey " \
	#( #[ 16 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" copyFrom:to: " \
	#( #[ 34 33 193 81 192 115 32 164 35 176 116 36 81 35 32 \
 33 132 0 242 36 243 245] \
	#( #replaceFrom:to:with:startingAt:  ) ) >

<primitive 112 temp 11		" coerce: " \
	#( #[ 32 164 33 163 176 114 34 81 33 163 33 131 0 242 34 \
 243 245] \
	#( #replaceFrom:to:with:  ) ) >

<primitive 112 temp 12		" at:ifAbsent: " \
	#( #[ 33 80 200 251 4 33 32 163 204 247 3 34 165 243 242 \
 32 33 177 243 245] \
	#(  ) ) >

<primitive 112 temp 13		" = " \
	#( #[ 32 163 33 163 202 247 2 92 243 242 80 114 32 225 3 \
 14 35 33 34 81 192 241 114 177 202 247 2 92 244 243 \
 179 242 91 243 245] \
	#(  ) ) >

<primitive 98 #ArrayedCollection \
	<primitive 97 #ArrayedCollection #SequenceableCollection #Smalltalk:prelude/acollection.st \
	#(  #current ) \
	#( #shallowCopy #padTo: #next #lastKey #firstKey #first #do: #deepCopy #currentKey #copyFrom:to: #coerce: #at:ifAbsent: #=  ) \
	temp 5 7 > >

temp <- <primitive 110 13 >
<primitive 112 temp 1		" write: " \
	#( #[ 32 33 250 2 132 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" size " \
	#( #[ 32 250 1 134 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" read " \
	#( #[ 32 250 1 131 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" open:for: " \
	#( #[ 32 33 34 250 3 130 242 245] \
	#(  ) ) >

<primitive 112 temp 5		" open: " \
	#( #[ 32 33 48 250 3 130 242 245] \
	#( 'r'  ) ) >

<primitive 112 temp 6		" next " \
	#( #[ 32 10 36 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" first " \
	#( #[ 32 80 177 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" currentKey " \
	#( #[ 32 250 1 136 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" at:put: " \
	#( #[ 32 33 250 2 135 242 32 34 11 49 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" at: " \
	#( #[ 32 33 250 2 135 242 32 10 36 243 245] \
	#(  ) ) >

<primitive 112 temp 11		" modeString " \
	#( #[ 32 81 250 2 133 242 245] \
	#(  ) ) >

<primitive 112 temp 12		" modeInteger " \
	#( #[ 32 82 250 2 133 242 245] \
	#(  ) ) >

<primitive 112 temp 13		" modeCharacter " \
	#( #[ 32 80 250 2 133 242 245] \
	#(  ) ) >

<primitive 98 #File \
	<primitive 97 #File #SequenceableCollection #Smalltalk:prelude/file.st \
	#(  ) \
	#( #write: #size #read #open:for: #open: #next #first #currentKey #at:put: #at: #modeString #modeInteger #modeCharacter  ) \
	temp 3 4 > >

temp <- <primitive 110 5 >
<primitive 112 temp 1		" size " \
	#( #[ 32 250 1 117 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" printString " \
	#( #[ 48 113 81 32 163 178 225 2 13 33 32 34 177 169 11 \
 17 49 11 17 241 113 243 179 242 33 50 11 17 243 245 \
] \
	#( '#[ ' ' ' ']'  ) ) >

<primitive 112 temp 3		" at:put: " \
	#( #[ 32 33 34 250 3 119 242 245] \
	#(  ) ) >

<primitive 112 temp 4		" at: " \
	#( #[ 32 33 250 2 118 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" new: " \
	#( #[ 33 250 1 116 243 245] \
	#(  ) ) >

<primitive 98 #ByteArray \
	<primitive 97 #ByteArray #ArrayedCollection #Smalltalk:prelude/bytearray.st \
	#(  ) \
	#( #size #printString #at:put: #at: #new:  ) \
	temp 3 6 > >

temp <- <primitive 110 4 >
<primitive 112 temp 1		" wait " \
	#( #[ 250 0 148 242 16 80 201 247 10 32 95 11 22 242 95 \
 10 18 248 6 242 16 81 193 241 96 242 250 0 149 242 \
 245] \
	#(  ) ) >

<primitive 112 temp 2		" signal " \
	#( #[ 250 0 148 242 32 10 27 247 7 16 81 192 241 96 248 \
 6 242 32 10 38 10 48 242 250 0 149 242 245] \
	#(  ) ) >

<primitive 112 temp 3		" new: " \
	#( #[ 33 96 245] \
	#(  ) ) >

<primitive 112 temp 4		" new " \
	#( #[ 80 96 245] \
	#(  ) ) >

<primitive 98 #Semaphore \
	<primitive 97 #Semaphore #List #Smalltalk:prelude/semaphore.st \
	#(  #excessSignals ) \
	#( #wait #signal #new: #new  ) \
	temp 2 4 > >

temp <- <primitive 110 8 >
<primitive 112 temp 1		" yield " \
	#( #[ 93 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" unblock " \
	#( #[ 32 10 45 48 181 247 7 32 49 11 47 242 93 243 242 \
 32 83 250 2 145 242 32 10 45 243 245] \
	#( #TERMINATED 'unblock'  ) ) >

<primitive 112 temp 3		" termErr: " \
	#( #[ 48 33 11 17 49 11 17 168 242 245] \
	#( 'Cannot ' ' a terminated process.'  ) ) >

<primitive 112 temp 4		" terminate " \
	#( #[ 32 250 1 142 242 32 10 45 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" state " \
	#( #[ 32 250 1 146 113 33 80 201 247 4 48 113 33 243 242 \
 33 81 201 247 4 49 113 33 243 242 33 82 201 247 4 \
 50 113 33 243 242 33 83 201 247 4 50 113 33 243 242 \
 33 84 203 247 4 51 113 33 243 242 245] \
	#( #READY #SUSPENDED #BLOCKED #TERMINATED  ) ) >

<primitive 112 temp 6		" suspend " \
	#( #[ 32 10 45 48 181 247 7 32 49 11 47 242 93 243 242 \
 32 81 250 2 145 242 32 10 45 243 245] \
	#( #TERMINATED 'suspend'  ) ) >

<primitive 112 temp 7		" resume " \
	#( #[ 32 10 45 48 181 247 7 32 49 11 47 242 93 243 242 \
 32 80 250 2 145 242 32 10 45 243 245] \
	#( #TERMINATED 'resume'  ) ) >

<primitive 112 temp 8		" block " \
	#( #[ 32 10 45 48 181 247 7 32 49 11 47 242 93 243 242 \
 32 82 250 2 145 242 32 10 45 243 245] \
	#( #TERMINATED 'block'  ) ) >

<primitive 98 #Process \
	<primitive 97 #Process #Object #Smalltalk:prelude/process.st \
	#(  ) \
	#( #yield #unblock #termErr: #terminate #state #suspend #resume #block  ) \
	temp 2 4 > >

temp <- <primitive 110 10 >
<primitive 112 temp 1		" time: " \
	#( #[ 250 0 161 114 33 165 242 250 0 161 34 193 243 245] \
	#(  ) ) >

<primitive 112 temp 2		" sh: " \
	#( #[ 33 250 1 125 243 245] \
	#(  ) ) >

<primitive 112 temp 3		" perform:withArguments: " \
	#( #[ 34 33 250 2 143 243 245] \
	#(  ) ) >

<primitive 112 temp 4		" noDisplay " \
	#( #[ 81 80 250 2 8 243 245] \
	#(  ) ) >

<primitive 112 temp 5		" doPrimitive:withArguments: " \
	#( #[ 33 34 250 2 30 243 245] \
	#(  ) ) >

<primitive 112 temp 6		" displayAssign " \
	#( #[ 81 82 250 2 8 243 245] \
	#(  ) ) >

<primitive 112 temp 7		" display " \
	#( #[ 81 81 250 2 8 243 245] \
	#(  ) ) >

<primitive 112 temp 8		" debug: " \
	#( #[ 82 33 250 2 8 243 245] \
	#(  ) ) >

<primitive 112 temp 9		" date " \
	#( #[ 250 0 160 243 245] \
	#(  ) ) >

<primitive 112 temp 10		" clearScreen " \
	#( #[ 250 0 162 242 245] \
	#(  ) ) >

<primitive 98 #Smalltalk \
	<primitive 97 #Smalltalk #Dictionary #Smalltalk:prelude/smalltalk.st \
	#(  ) \
	#( #time: #sh: #perform:withArguments: #noDisplay #doPrimitive:withArguments: #displayAssign #display #debug: #date #clearScreen  ) \
	temp 3 3 > >

smalltalk new

